'use client';

import { forwardRef, useState } from 'react';
import { RiVisaLine } from 'react-icons/ri';
import * as SliderPrimitive from '@radix-ui/react-slider';
import { AnimatePresence, HTMLMotionProps, motion } from 'framer-motion';

import { WidgetLayout } from '@/components/ui/layout/widget-layout';

const CardWidget = forwardRef<
  HTMLDivElement,
  { className?: string } & HTMLMotionProps<'div'>
>(({ className = '', ...motionProps }, forwardedRef) => {
  const [isTapped, setIsTapped] = useState(false);

  return (
    <WidgetLayout
      ref={forwardedRef}
      className={`${className} h-full w-full flex flex-col overflow-hidden relative`}
      {...motionProps}
    >
      <AnimatePresence mode="popLayout" initial={false}>
        {isTapped && (
          <motion.div
            key="slider"
            initial={{ height: 0, opacity: 0, y: 30 }}
            animate={{ height: 'auto', opacity: 1, y: 0 }}
            exit={{ height: 0, opacity: 0, y: 30 }}
            transition={{
              type: 'spring',
              stiffness: 400,
              damping: 30,
              mass: 0.8,
            }}
            className="mb-4"
          >
            <Slider onComplete={() => setIsTapped(false)} />
          </motion.div>
        )}

        <motion.div
          layout
          whileHover={{
            scale: 1.02,
            transition: {
              type: 'spring',
              stiffness: 400,
              damping: 25,
              mass: 0.8,
            },
          }}
          whileTap={{
            scale: 0.98,
            transition: {
              type: 'spring',
              stiffness: 600,
              damping: 25,
              mass: 0.8,
            },
          }}
          animate={{
            y: isTapped ? 20 : 0,
          }}
          transition={{
            type: 'spring',
            stiffness: 300,
            damping: 30,
            mass: 1,
          }}
          className="w-full bg-gradient-to-t from-[#101010] to-[#1d1d1d] shadow-lg aspect-[1.586/1] rounded-2xl sm:rounded-3xl font-mono p-6 gap-6 flex flex-col relative hover:cursor-pointer"
          onClick={() => setIsTapped(!isTapped)}
        >
          <SolidGateLogo />
          <div className="text-muted-foreground select-none">
            **** **** **** 4242
          </div>
          <div className="flex justify-between items-center absolute bottom-1 left-6 right-6">
            <p className="text-sm text-muted-foreground select-none">
              DANYIL BUTOV
            </p>
            <RiVisaLine className="w-12 h-12 text-white" />
          </div>
        </motion.div>
        {!isTapped && (
          <motion.div
            key="payment-info"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -30 }}
            transition={{
              type: 'spring',
              stiffness: 400,
              damping: 25,
              mass: 0.8,
              delay: 0.1,
            }}
            className="w-full space-y-1 sm:space-y-1.5 mt-5"
          >
            <div className="flex justify-between">
              <p className="text-xs sm:text-sm text-muted-foreground">
                Subtotal
              </p>
              <p className="text-xs sm:text-sm font-medium text-neutral-400">
                $99.86
              </p>
            </div>

            <div className="flex justify-between">
              <p className="text-xs sm:text-sm text-muted-foreground">VAT</p>
              <p className="text-xs sm:text-sm font-medium text-neutral-400">
                $10.00
              </p>
            </div>

            <div className="flex justify-between pt-1 border-t border-border">
              <p className="text-xs sm:text-sm font-semibold">Total</p>
              <p className="text-xs sm:text-sm font-semibold">$109.86</p>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </WidgetLayout>
  );
});

function SolidGateLogo() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="120"
      height="30"
      viewBox="0 0 156 32"
      fill="none"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M0 0H32V32H0V0Z"
        fill="#4DF987"
      />
      <rect x="7" y="12" width="13" height="13" fill="black" />
      <rect x="12" y="7" width="13" height="13" fill="black" />
      <rect x="12" y="12" width="8" height="8" fill="#4DF987" />
      <path d="M74.5779 4V22.9999H77.5585V4H74.5779Z" fill="white" />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M64.535 23.4674C63.3395 23.4674 62.287 23.2682 61.3777 22.87C60.4683 22.4544 59.7021 21.909 59.079 21.2336C58.4559 20.5583 57.9845 19.7964 57.6646 18.948C57.3446 18.0822 57.1846 17.1904 57.1846 16.2727V15.7532C57.1846 14.8354 57.3446 13.9437 57.6646 13.0779C58.0013 12.2121 58.4812 11.4416 59.1042 10.7662C59.7441 10.0736 60.5188 9.52817 61.4281 9.12991C62.3375 8.73163 63.3732 8.53253 64.535 8.53253C65.697 8.53253 66.7241 8.73163 67.6167 9.12991C68.526 9.52817 69.3007 10.0736 69.9406 10.7662C70.5804 11.4416 71.0604 12.2121 71.3804 13.0779C71.7172 13.9437 71.8855 14.8354 71.8855 15.7532V16.2727C71.8855 17.1904 71.7256 18.0822 71.4055 18.948C71.0857 19.7964 70.6141 20.5583 69.9911 21.2336C69.368 21.909 68.6018 22.4544 67.6925 22.87C66.7831 23.2682 65.7307 23.4674 64.535 23.4674ZM64.535 20.8181C65.4612 20.8181 66.2527 20.6103 66.9094 20.1947C67.5662 19.7618 68.063 19.1817 68.3997 18.4545C68.7534 17.7272 68.9302 16.9134 68.9302 16.0129C68.9302 15.0952 68.7534 14.2727 68.3997 13.5454C68.0461 12.8182 67.5409 12.2468 66.8842 11.8312C66.2274 11.3983 65.4443 11.1818 64.535 11.1818C63.6257 11.1818 62.8427 11.3983 62.1859 11.8312C61.5292 12.2468 61.024 12.8182 60.6704 13.5454C60.3168 14.2727 60.1399 15.0952 60.1399 16.0129C60.1399 16.9134 60.3083 17.7272 60.6451 18.4545C60.9988 19.1817 61.5039 19.7618 62.1606 20.1947C62.8174 20.6103 63.6089 20.8181 64.535 20.8181Z"
        fill="white"
      />
      <path
        d="M45.5913 22.2206C46.6185 23.0172 48.0499 23.4154 49.8854 23.4154C51.0305 23.4154 52.0325 23.2336 52.8912 22.87C53.767 22.489 54.449 21.9609 54.9373 21.2856C55.4257 20.6103 55.6698 19.8224 55.6698 18.922C55.6698 17.6752 55.2151 16.7056 54.3058 16.0129C53.4133 15.303 52.2009 14.8615 50.6685 14.6883L49.3297 14.5584C48.5719 14.4718 48.0247 14.29 47.6879 14.0129C47.3511 13.7359 47.1826 13.355 47.1826 12.8701C47.1826 12.3333 47.4016 11.8918 47.8394 11.5455C48.2941 11.1992 48.9424 11.026 49.7844 11.026C50.6769 11.026 51.3505 11.2078 51.8052 11.5714C52.2598 11.9351 52.504 12.3853 52.5376 12.9221H55.2404C55.2068 11.5022 54.6931 10.4286 53.6996 9.70135C52.7061 8.95676 51.401 8.58447 49.7844 8.58447C48.7404 8.58447 47.8142 8.75763 47.0059 9.10394C46.2144 9.45026 45.5913 9.94376 45.1367 10.5844C44.682 11.2251 44.4547 12.013 44.4547 12.9481C44.4547 14.1255 44.8588 15.0605 45.6671 15.7532C46.4923 16.4458 47.6036 16.8701 49.0013 17.0259L50.3401 17.1558C51.2831 17.2597 51.9482 17.4675 52.3356 17.7791C52.7397 18.0735 52.9418 18.4804 52.9418 18.9999C52.9418 19.5714 52.6724 20.0475 52.1335 20.4285C51.5946 20.8094 50.8538 20.9999 49.9106 20.9999C48.7993 20.9999 47.9994 20.7834 47.511 20.3505C47.0227 19.9177 46.7617 19.4415 46.728 18.922H44C44.0505 20.3246 44.5809 21.4241 45.5913 22.2206Z"
        fill="white"
      />
      <path
        d="M80.8342 22.9999V9.00006H83.7896V22.9999H80.8342Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M93.0947 23.4674C92.1179 23.4674 91.2255 23.2856 90.4172 22.9219C89.6257 22.5583 88.9269 22.0475 88.3207 21.3895C87.7313 20.7315 87.2766 19.9696 86.9567 19.1038C86.6367 18.238 86.4767 17.2943 86.4767 16.2727V15.7792C86.4767 14.7748 86.6283 13.8398 86.9314 12.974C87.2513 12.0909 87.6976 11.3204 88.2701 10.6624C88.8427 10.0044 89.5247 9.49353 90.3162 9.12991C91.1245 8.74896 92.017 8.55847 92.9937 8.55847C94.0377 8.55847 94.9723 8.79224 95.7974 9.25977C96.5579 9.66638 97.1809 10.2778 97.6666 11.0939V4H100.622V22.9999H98.2728V20.1385C98.1954 20.3116 98.1112 20.4775 98.0203 20.6363C97.4814 21.606 96.7825 22.3245 95.9237 22.7921C95.0649 23.2423 94.1218 23.4674 93.0947 23.4674ZM93.6504 20.8441C94.4082 20.8441 95.0902 20.6709 95.6964 20.3246C96.3195 19.9783 96.8162 19.4761 97.1866 18.8181C97.574 18.1428 97.7677 17.3549 97.7677 16.4545V15.3376C97.7677 14.4545 97.574 13.7013 97.1866 13.0779C96.7993 12.4545 96.2942 11.9784 95.6711 11.6494C95.0481 11.3204 94.3661 11.1559 93.6251 11.1559C92.8 11.1559 92.0675 11.3636 91.4275 11.7792C90.8044 12.1775 90.3162 12.7403 89.9625 13.4675C89.6089 14.1948 89.4321 15.0432 89.4321 16.0129C89.4321 16.9999 89.6089 17.8571 89.9625 18.5844C90.333 19.3116 90.8381 19.8744 91.478 20.2726C92.1179 20.6536 92.842 20.8441 93.6504 20.8441Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M109.437 28H105.583V25.4414H109.437C109.437 25.4414 111.612 25.3832 112.351 25.1641C112.97 24.9805 113.546 24.6708 113.866 24.0128C114.203 23.3721 114.372 22.5323 114.372 21.4934V20.2306L114.348 20.2749L114.321 20.3246C113.833 21.2423 113.176 21.9349 112.351 22.4025C111.542 22.87 110.616 23.1038 109.572 23.1038C108.629 23.1038 107.77 22.9219 106.996 22.5583C106.221 22.1947 105.556 21.6839 105 21.0259C104.445 20.3679 104.015 19.6146 103.712 18.7661C103.409 17.9004 103.257 16.9826 103.257 16.0129V15.5194C103.257 14.5324 103.409 13.6147 103.712 12.7662C104.032 11.9178 104.478 11.1818 105.051 10.5585C105.623 9.91779 106.305 9.42429 107.097 9.07797C107.905 8.73163 108.789 8.55847 109.749 8.55847C110.86 8.55847 111.837 8.80957 112.679 9.31171C113.538 9.79657 114.212 10.5152 114.7 11.4675C114.744 11.5532 114.786 11.6406 114.826 11.7296V9.00006H117.175V21.3375C117.175 23.0345 116.906 24.4024 116.367 25.4414C115.845 26.4977 114.842 27.0848 113.795 27.4677C112.749 27.8507 111.122 28 109.437 28ZM110.305 20.4025C111.046 20.4025 111.719 20.238 112.325 19.909C112.949 19.5627 113.437 19.0778 113.791 18.4545C114.161 17.8138 114.346 17.0519 114.346 16.1688V15.1039C114.346 14.2381 114.153 13.5108 113.765 12.9221C113.395 12.316 112.906 11.8571 112.3 11.5455C111.694 11.2338 111.037 11.0779 110.33 11.0779C109.522 11.0779 108.806 11.2771 108.183 11.6754C107.56 12.0563 107.072 12.6017 106.718 13.3117C106.381 14.0043 106.213 14.8181 106.213 15.7532C106.213 16.7056 106.39 17.5367 106.743 18.2467C107.097 18.9393 107.577 19.4761 108.183 19.8571C108.806 20.2207 109.513 20.4025 110.305 20.4025Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M128.812 22.9999V20.3098C128.7 20.675 128.557 21.0089 128.383 21.3116C128.013 21.9696 127.491 22.4804 126.817 22.844C126.16 23.1903 125.352 23.3635 124.392 23.3635C123.399 23.3635 122.531 23.1903 121.79 22.844C121.05 22.4804 120.477 21.9609 120.073 21.2856C119.669 20.593 119.467 19.7704 119.467 18.8181C119.467 17.8138 119.694 16.9826 120.149 16.3246C120.62 15.6666 121.285 15.1731 122.144 14.8441C123.003 14.5151 124.03 14.3506 125.226 14.3506H128.333V14.0909C128.333 13.2251 128.114 12.5671 127.676 12.1169C127.238 11.6667 126.59 11.4416 125.731 11.4416C125.259 11.4416 124.737 11.4502 124.165 11.4675C124.059 11.4707 123.954 11.4742 123.849 11.478C123.76 11.4812 123.671 11.4846 123.583 11.4883C123.506 11.4914 123.429 11.4947 123.352 11.4982C123.056 11.5116 122.763 11.5273 122.472 11.5455C122.215 11.5537 121.972 11.564 121.741 11.5762C121.489 11.5895 121.253 11.6053 121.033 11.6234V9.00006C121.403 8.96539 121.807 8.93945 122.245 8.92212C122.7 8.88751 123.163 8.86151 123.634 8.84421C124.123 8.8269 124.586 8.81824 125.024 8.81824C126.405 8.81824 127.55 9.00006 128.459 9.36368C129.368 9.72729 130.042 10.3074 130.48 11.1039C130.934 11.8831 131.162 12.9307 131.162 14.2467V22.9999H128.812ZM128.333 16.3506V17.8051C128.299 18.6536 128.122 19.3116 127.802 19.7791C127.499 20.2466 127.112 20.5843 126.64 20.7921C126.169 20.9826 125.672 21.0778 125.15 21.0778C124.257 21.0778 123.575 20.87 123.104 20.4544C122.632 20.0215 122.397 19.4501 122.397 18.7402C122.397 18.0302 122.632 17.4588 123.104 17.0259C123.575 16.5757 124.257 16.3506 125.15 16.3506H128.333Z"
        fill="white"
      />
      <path
        d="M139.208 23.1557C138.08 23.1557 137.128 22.9999 136.354 22.6882C135.579 22.3765 134.99 21.8397 134.586 21.0778C134.198 20.3159 134.005 19.2856 134.005 17.9869V5H136.808V9.00006H141.254V11.2598H136.808V18.2467C136.808 18.9739 136.994 19.5367 137.364 19.935C137.751 20.3159 138.29 20.5064 138.981 20.5064H141.254V23.1557H139.208Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M149.559 23.4674C148.38 23.4674 147.353 23.2596 146.477 22.844C145.602 22.4284 144.886 21.883 144.33 21.2077C143.775 20.515 143.354 19.7445 143.067 18.896C142.798 18.0302 142.663 17.1471 142.663 16.2467V15.7532C142.663 14.8354 142.798 13.9524 143.067 13.1039C143.354 12.2381 143.775 11.4675 144.33 10.7922C144.886 10.0996 145.585 9.55414 146.427 9.15588C147.286 8.7403 148.279 8.53253 149.407 8.53253C150.872 8.53253 152.093 8.86151 153.07 9.51953C154.047 10.1775 154.779 11.0347 155.267 12.0909C155.756 13.1299 156 14.2554 156 15.4675V16.6882H145.493C145.546 17.357 145.681 17.9717 145.896 18.5324C146.182 19.2596 146.629 19.8397 147.235 20.2726C147.841 20.6882 148.616 20.896 149.559 20.896C150.502 20.896 151.276 20.6882 151.883 20.2726C152.489 19.8397 152.859 19.3376 152.994 18.7661H155.747C155.562 19.7185 155.183 20.5497 154.611 21.2596C154.055 21.9696 153.348 22.515 152.489 22.896C151.63 23.2769 150.653 23.4674 149.559 23.4674ZM145.896 13.4415C145.752 13.807 145.645 14.2053 145.573 14.6363H153.13C153.062 14.1294 152.941 13.6705 152.767 13.2597C152.48 12.5671 152.06 12.039 151.504 11.6754C150.948 11.2944 150.249 11.1039 149.407 11.1039C148.532 11.1039 147.799 11.3117 147.21 11.7273C146.62 12.1429 146.182 12.7143 145.896 13.4415Z"
        fill="white"
      />
      <path d="M80.8342 7.06V4H83.7896V7.06H80.8342Z" fill="white" />
    </svg>
  );
}

CardWidget.displayName = 'CardWidget';

function Slider({ onComplete }: { onComplete: () => void }) {
  const [value, setValue] = useState([0]);
  const handleValueChange = (newValue: number[]) => {
    setValue(newValue);
    if (newValue[0] >= 99) {
      setValue([100]);
      onComplete();
      setTimeout(() => {
        setValue([0]);
      }, 200);
    }
  };

  const opacity = Math.max(0, 1 - value[0] / 100);

  return (
    <div className="px-2">
      <SliderPrimitive.Root
        value={value}
        onValueChange={handleValueChange}
        max={100}
        step={1}
        className="relative flex items-center w-full h-12 rounded-full border border-white/10 bg-neutral-200/60 dark:bg-neutral-800/50 backdrop-blur"
      >
        <SliderPrimitive.Track className="relative h-full w-full rounded-full bg-transparent">
          <SliderPrimitive.Range className="absolute h-full bg-white/70 dark:bg-white/10 rounded-full" />
        </SliderPrimitive.Track>

        <span
          className="absolute inset-0 flex items-center justify-center text-sm font-semibold text-neutral-600 pointer-events-none select-none"
          style={{ opacity }}
        >
          Slide to pay
        </span>

        <SliderPrimitive.Thumb className="w-16 h-12 rounded-full bg-white shadow-[0_4px_12px_rgba(0,0,0,0.25)] flex items-center justify-center cursor-grab active:cursor-grabbing focus:outline-none focus:ring-2 focus:ring-white/20 focus:ring-offset-2 focus:ring-offset-transparent" />
      </SliderPrimitive.Root>
    </div>
  );
}

export default CardWidget;
